{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeHolder","handleChange","className","type","placeholder","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toString","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIC,UAAU,SACVC,KAAO,SACPC,YAAeJ,EACfK,SAAYJ,KCLPK,G,YAAO,SAAAC,GAAK,OACrB,sBAAKL,UAAU,iBAAf,UACI,qBAAKM,IAAI,UAAUC,IAAG,+BAA4BF,EAAMG,QAAQC,GAA1C,4BACtB,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCHbC,EAAW,SAAAP,GAAK,OACzB,qBAAKL,UAAU,YAAf,SAEQK,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCoCpBM,G,wDAtCb,aAAc,IAAD,8BACX,gBAaFhB,aAAe,SAACiB,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXR,SAAS,GACTK,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACJ,SAAUa,S,oBAO1C,WAAS,IAAD,EAE0BC,KAAKN,MAA9BR,EAFD,EAECA,SAAUK,EAFX,EAEWA,YACXU,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAC9CA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYc,WAAWF,kBAG7D,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEF,YAAc,kBACdC,aAAgB4B,KAAK5B,eAEvB,cAAC,EAAD,CAAUc,SAAUe,W,GAjCVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ca5e53c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeHolder, handleChange}) =>(\r\n    <input \r\n        className='search'\r\n        type = 'search'\r\n        placeholder = {placeHolder}\r\n        onChange = {handleChange}\r\n    />\r\n)","import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props =>(\r\n    <div className='card-container'>\r\n        <img alt='monster' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props =>(\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster =>(\r\n                <Card key={monster.id} monster={monster} />\r\n                ))\r\n            }\r\n    </div>\r\n)","import React, {Component} from 'react';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField:[]\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){\n\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toString().toLowerCase())\n    );\n\n    return(\n      <div className='App'>\n        <h1>monsters Rolodex</h1>\n        <SearchBox\n          placeHolder = 'Search Monsters' \n          handleChange = {this.handleChange}\n          />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}